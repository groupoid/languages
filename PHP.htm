<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="" />
    <meta name="author" content="Maxim Sokhatsky" />
    <title>2020-12-31</title>
    <link rel="stylesheet" href="https://n2o.dev/blank.css" />
    <link rel="stylesheet" href="../../journal.css" />
</head>
<body>
<nav>
    <a href='index.html'>Languages</a>
    <a href='#'>PHP</a>
</nav>
<main>
    <section>
    <h3>PHP</h3>

<p>В твиттере опять Сохацкому не дают работать и отвлекают на графоманство.
   С помощью шантажа капиталом меня принудили написать статью для нашей
   Энциклопедии Языков Программирования. А именно, статью про язык программирования PHP,
   на котором написано всё зло человечества Facebook, и еще парочка популярных
   сайтов типа Wikipedia и продуктов типа Drupal.</p>

<p>Я редко даю расширенные ретроспективы языкам, потому что считаю это
   журналистикой, она может быть хорошая или плохая но не заменит само языкописательство.
   Поэтому мне абсолютно все равно, какое наследие у этого языка, на скольки пентальонах
   устройствах оно работает, сколько бабла, рекламы, котов или порно эти
   языки обрабатывают в наносекунду. Это все для меня вещи вторичны, так как на самых
   прекрасных языках программирования пишут единицы, а используются они вообще нигде.
   Так, что все это начиная с какого-то момента очень относительно.</p>

<p>С другой стороны писать про PHP в кратком стиле нелепо (указав лишь BNF нотацию,
   семантику, историческую справку и тактико-технические характеристики) &mdash;
   этот язык заслуживает истории про ранний веб, и те быстрозацементированные
   уникальные пути развития которые определелили веб 2020. Современный веб 2020
   это как Коронавирус &mdash; инфекция которая случайным образом сражает
   даже самых храбрых и запечатывает в забвении. Нужно понимать, что PHP был создан
   во времена когда в вебе господствовал Netscape, про который вы можете найти
   фильмы на Нэшинал Географик. В те времена JavaScript представлял собой
   маленький скриптовый движек, созданный, чтобы анимировать падающие снежики
   на Новый Год на веб страницах (тогда это было модно) и называлась эта
   технология DHTML.</p>

<p>В этом месте хотелось бы отпустить мысли и объяснить за что же мы ненавидим капитализм,
   бабло, и технологии, которые под их давление замораживаются и приобретают
   инерцию предельной скорости движения. Три всадника этого апокалипсиса &mdash;
   это Netscape, JavaScript и PHP. Хотя эти вещи в какой-то мере совершенно дополняют друг друга
   и напоминают мне сейчас сегоднешнемиу что-то типа фулстека архаичных систем скорее нежели
   современные средства разработки. Если скажем сейчас стояла бы задача написать новый стандарт
   на все начиная от виртуальной машины, синтаксиса и языка &mdash; я думаю все бы согласились
   на что-то посвещее и покультурнее. Сейчас эти вещи выглядят для образованных людей так же,
   как для нас сейчас выглядит ALGOL и PL/1, языки еще более архаичные и не менее легендарные.</p>

<p>Концепция веба простая как чистая лямбда: в контекстно-независимой среде шаблонизатор выплевывает
   новую страницу на каждый запрос и умирает. Дальше специализированый клиент (браузер)
   исполняет джаваскрипт, чтобы запрашивать новые страницы и перерисовывая части страницы без
   ее перезагрузки (да да, DHTML, или то, что сейчас называют SPA был доступен еще во времена Netscape).
   В этой связке идеально все: контекстнонезависимый шаблонизатор PHP (который можно сделать
   контекстнозависимым подключив базку), специализированый клиент, виртуальная машина для
   скриптования страничек. Любой архитектор который собрался бы рефакторить современный веб
   оставил бы эту тройку. Да и все попытки переписать веб так или иначе сводятся к этим компонентам.</p>

<p>Однако развитие языков и рантаймов пошло далеко и многих проблем существующего веба
   удалось бы избежать имея хоть малейшую возможность что-то изменить, но изменить ничего невозможно,
   можно только пытаться ждать. К сожалению современный веб инфицировался этой тройкой.</p>

<p>Каждая из компонент (как и вирусы) естественным образом пыталась себя заменить.
   Так JavaScript хотел себя заменить Dart
   самой злой корпорацией на планете, хотя рядом всегда был и есть Lua, который тоже вполне подошел бы
   на роль JIT-интерпретатора. Вот OpenResty для NGNIX уже выглядит как лучше стек чем LAMP!
   В нем как минимум на одну компоненту все улучшено, снижена латенси за счет JIT-рантайма
   прямо в веб-сервере, вообщем настоящая вещь (только стектрейсы слабоватые).</p>

<p>Другой пример хорошей замены, это замена PHP на XSLT транформации. Тоже консистентный и совершенно другой
   подход к рендеру клиентом контента. В этом подходе даные между клиентом бегают исключительно
   типизированные XSD, сами запросы совершаются по SOAP, XSLT кешируются в
   браузере (да да, браузер такое умеет) и рендерят саму страницу на клиенте. В итоге
   получается чисты XML-RPC бек, все стандартизировано и управляемо. Я видел некоторые
   части ПриватБанк построенные на этой технология в 2011 году, жалко что тема с XSLT в браузере
   не стала повсеместно популярной, во много этом из-за синхронной природы транформаций (нужен полный датасет),
   но думаю можно было бы в стандарт протянуть какой-то стриминг или даже Пи-калкулус при желании.
   Не было сильной руки рынка кормящейся с нужного продукта.</p>

<p>Но были и плохие примеры подражания. Другие языки сразу скопировали успешность PHP.
   Так в Java мире появились JSP, а в Microsoft мире ASP, в Python это DTL и т.д. и т.п.
   сотни их и все берут свою родословную от Netscape/JavaScript/PHP. JavaScript был
   и остается основным рантаймом веба без видимой возможности быть замененым в
   ближайшее время. Разве что успел инфицировать серверные бекенды. Да да, на языке придуманом
   для снежинок в Joyent предложили писать серверные сетевые приложения.</p>

<p>Итак давайте начинать классифицировать экстримы в подходе к рендерингу
   контента: 1) на клиенте (XSLT), pure data-on-wire; 2) на сервере (PHP), html-over-http.
   Опять существуют тысячи фреймворков которые реализуют это, причем на языках
   которые существовали и до PHP, например Perl или Python. Вообще в те времена это называлось CGI.
   Любая программа помещенная в контекст вебсервера становилась шаблонизатором,
   например написанная на Pascal, тогда веб не был привязан к языку. Одновременно
   с PHP возник не менее легендарный и более консистетный язык программирования Ruby
   с развитой системой макросов, так необходимых в веб-программировании, синтаксис
   которого перекочевал на другие виртуальные машины и платформы. Кстати о них.</p>

<p></p>

    </section>
</main>
<footer>Namdak Tonpa <span class="heart">&nbsp;❤&nbsp;</span> 2009—2020</footer>
</body>
</html>
